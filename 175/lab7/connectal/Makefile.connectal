# Copyright (c) 2014 Quanta Research Cambridge, Inc
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#

CONNECTALDIR=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
include $(CONNECTALDIR)/Makefile.version

V?=0
ifeq ($(V),0)
Q=@
VERBOSE_SWITCH=
else
Q=
VERBOSE_SWITCH=--verbose
endif

#PROJECTDIR?=$(BOARD)

bozotarget:
	@echo "Makefile.connectal: please invoke with make gen.boardname"

VARIANT_PROJECTS := $(foreach item,$(VARIANT_LIST),variantgen.$(item))
#
## use "make gen.board" to generate the build directory
gen.%:
ifeq ($(BOARD),)
	$(eval BOARD := $*)
endif
ifeq ($(PROJECTDIR),)
	$(eval PROJECTDIR := $*)
endif
	+BOARD=$(BOARD) PROJECTDIR=$(PROJECTDIR) $(MAKE) --no-print-directory gentarget prebuild $(VARIANT_PROJECTS)

variantgen.%:
	BOARD=$(BOARD) PROJECTDIR=variant$* \
	    VARIANT=$* PRTOP_FILE=../$(BOARD)/Impl/TopDown/top-post-route.dcp \
	    $(MAKE) --no-print-directory gentarget prebuild

build.%: gen.%
	$(MAKE) -C $(PROJECTDIR) --no-print-directory all

verilog.%: gen.%
	$(MAKE) -C $(PROJECTDIR) --no-print-directory verilog

run.%:
ifeq ($(PROJECTDIR),)
	$(eval PROJECTDIR := $*)
endif
	$(MAKE) -C $(PROJECTDIR) --no-print-directory run

IPDIR?=$(CONNECTALDIR)/out
NUMBER_OF_USER_TILES?=1
SLAVE_DATA_BUS_WIDTH?=32
SLAVE_CONTROL_ADDR_WIDTH?=5
PLATFORM_NUMBER_OF_MASTERS?=1
PIN_TYPE?=Empty
PIN_TYPE_INCLUDE?=Misc
#need to import into HostInterface, can't use HostInterface

ifndef BURST_LEN_SIZE
BURST_LEN_SIZE=10
endif

CONNECTALFLAGS += -D ConnectalVersion=$(VERSION)
CONNECTALFLAGS += -D NumberOfMasters=$(PLATFORM_NUMBER_OF_MASTERS) -D PinType=$(PIN_TYPE) -D PinTypeInclude=$(PIN_TYPE_INCLUDE)
CONNECTALFLAGS += -D NumberOfUserTiles=$(NUMBER_OF_USER_TILES)
CONNECTALFLAGS += -D SlaveDataBusWidth=$(SLAVE_DATA_BUS_WIDTH)
CONNECTALFLAGS += -D SlaveControlAddrWidth=$(SLAVE_CONTROL_ADDR_WIDTH)
CONNECTALFLAGS += -D BurstLenSize=$(BURST_LEN_SIZE)
CONNECTALFLAGS += --ipdir=$(IPDIR)
CNOC?=$(shell grep -q CnocTop $(CONNECTALDIR)/boardinfo/$(BOARD).json && echo --cnoc)
USE_CNOC?=$(shell grep -q SIMULATION $(CONNECTALDIR)/boardinfo/$(BOARD).json && echo cnoc)
ifneq ($(AUTOTOP),)
USE_AUTOTOP = 1
endif
ifneq ($(S2H_INTERFACES),)
USE_AUTOTOP = 1
endif
ifneq ($(H2S_INTERFACES),)
USE_AUTOTOP = 1
endif
ifneq ($(MEM_INTERFACES),)
$(error Convert use of MEM_INTERFACES into MEM_READ_INTERFACES and MEM_WRITE_INTERFACES)
endif
ifneq ($(MEM_READ_INTERFACES),)
USE_AUTOTOP = 1
endif
ifneq ($(MEM_WRITE_INTERFACES),)
USE_AUTOTOP = 1
endif

INTERFACES += MemServerRequest MMURequest MemServerIndication MMUIndication
BSVFILES += $(CONNECTALDIR)/bsv/ConnectalMemory.bsv
ifneq ($(NUMBER_OF_MASTERS), 0)
CPPFILES += $(CONNECTALDIR)/cpp/dmaManager.c $(CONNECTALDIR)/cpp/platformMemory.cpp
CPPFILES2_dma = $(CONNECTALDIR)/cpp/dmaManager.c $(CONNECTALDIR)/cpp/platformMemory.cpp
endif

INTERFACES_cnoc = XsimMsgRequest XsimMsgIndication
CPPFILES_cnoc   = $(CONNECTALDIR)/cpp/transportXsim.c
BSVFILES_cnoc   = $(CONNECTALDIR)/bsv/XsimIF.bsv
CPPFILES2_cnoc  = $(CONNECTALDIR)/cpp/transportXsim.c

INTERFACES += $(INTERFACES_$(USE_CNOC))
CPPFILES   += $(CPPFILES_$(USE_CNOC))
BSVFILES   += $(BSVFILES_$(USE_CNOC))

ifneq ($(PYFILES),)
CONNECTALFLAGS += --shared -D PORTAL_JSON
CPPFILES += $(CONNECTALDIR)/cpp/portalPython.cpp
CPPFILES2 = $(CONNECTALDIR)/cpp/runpython.cpp
ifneq ($(BOARD),zedboard)
ifneq ($(BOARD),zedboard_ubuntu)
CONNECTALFLAGS += -ljsoncpp
endif
endif

ifeq ($(BOARD),zedboard)
## git clone git://github.com/cambridgehackers/python-for-android-sdk
PYTHON_FOR_ANDROID ?= $(CONNECTALDIR)/../python-for-android-sdk
CONNECTALFLAGS += -I$(PYTHON_FOR_ANDROID)/include/ -I.
CONNECTALFLAGS += -L$(PYTHON_FOR_ANDROID)/lib -lpython2.7
CONNECTALFLAGS += --stl=gnustl_static --cxxflags=-fexceptions --android-toolchain=4.8

CPPFILES  += jsoncpp/dist/jsoncpp.cpp
CPPFILES2 += jsoncpp/dist/jsoncpp.cpp

prebuild::
	[ -d jsoncpp ] || git clone git://github.com/open-source-parsers/jsoncpp
	cd jsoncpp; python amalgamate.py; mkdir -p json; cd json; ln -sf ../dist/json/*.h .
endif #zedboard

ifeq ($(BOARD),zedboard_ubuntu)
CONNECTALFLAGS += --cxxflags=-std=c++11
CONNECTALFLAGS += -I usr/include
CONNECTALFLAGS += -L usr/lib/arm-linux-gnueabihf -lpython2.7

CPPFILES  += jsoncpp/dist/jsoncpp.cpp
CPPFILES2 += jsoncpp/dist/jsoncpp.cpp

prebuild::
	[ -d jsoncpp ] || git clone git://github.com/open-source-parsers/jsoncpp
	cd jsoncpp; python amalgamate.py; mkdir -p json; cd json; ln -sf ../dist/json/*.h .
endif # zedboard_ubuntu
endif # PYFILES

ifneq ($(CPPFILES2),)
ALL_CPPFILES2 = $(CPPFILES2) $(CPPFILES2_$(USE_CNOC)) $(CPPFILES2_dma)
endif

all bits verilog implementation bsim xsim vsim xsimrun: gentarget prebuild
	+make -C $(PROJECTDIR) --no-print-directory $@

android.exe bsim_exe ubuntu.exe exe: gentarget
	+make -C $(PROJECTDIR) --no-print-directory $@

PCIEGEN=$(shell grep PCIE $(CONNECTALDIR)/boardinfo/$(BOARD).json | sed 's/.*PCIE\([123]\).*/\1/')
NEED_XILINX_PCIE_ac701=$(PCIEGEN)
NEED_XILINX_PCIE_ac701g2=$(PCIEGEN)
NEED_XILINX_PCIE_kc160g2=$(PCIEGEN)
NEED_XILINX_PCIE_kc705g2=$(PCIEGEN)
NEED_XILINX_PCIE_vc707g2=$(PCIEGEN)
NEED_XILINX_PCIE_kc705=$(PCIEGEN)
NEED_XILINX_PCIE_vc707=$(PCIEGEN)
NEED_XILINX_PCIE_kcu105=$(PCIEGEN)
NEED_XILINX_PCIE_vcu108=3
NEED_XILINX_PCIE_zcu102=$(PCIEGEN)
NEED_XILINX_PCIE_nfsume=3
NEED_XILINX_PCIE_vc709=3
NEED_XILINX_PCIE_v2000t=1

NEED_ALTERA_PCIE_de5=1
NEED_ALTERA_PCIE_htg4=1

NEED_ALTERA_ETH_de5=1
NEED_ALTERA_ETH_htg4=1
QUARTUS_SH=$(shell which quartus_sh)

ifeq ($(NEED_XILINX_PCIE_$(BOARD)),1)
#    FPGAMAKE_CONNECTALFLAGS += -P mkPcieEndpointX7 -P mkPcieHost
    CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/pcie_7x_0/pcie_7x_0.xci
    CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS"
endif
ifeq ($(PCIEGEN),2)
    FPGAMAKE_CONNECTALFLAGS += -P mkPcieHost
    CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/pcie2_7x_0/pcie2_7x_0.xci
    CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS"
endif

ifeq ($(NEED_XILINX_PCIE_$(BOARD)),3)
    FPGAMAKE_CONNECTALFLAGS += -P mkPcieHost
    CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/pcie3_7x_0/pcie3_7x_0.xci
    CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS"
endif

ifeq ($(NEED_ALTERA_PCIE_$(BOARD)),1)
	FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/synthesis/altera_pcie_reconfig_driver_wrapper/altera_pcie_reconfig_driver_wrapper.qip
	FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/synthesis/altera_pcie_sv_hip_ast_wrapper/altera_pcie_sv_hip_ast_wrapper.qip
	FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/synthesis/alt_xcvr_reconfig_wrapper/alt_xcvr_reconfig_wrapper.qip
	#FPGAMAKE_CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/siv_gen2x8/siv_gen2x8.qip
	FPGAMAKE_CONNECTALFLAGS += --tcl=$(PROJECTDIR)/generatedbsv/$(BOARD).qsf
	FPGAMAKE_CONNECTALFLAGS += --tcl=$(CONNECTALDIR)/constraints/altera/$(BOARD).sdc
	CONNECTALFLAGS += --bscflags="+RTS -K46777216 -RTS -demote-errors G0066:G0045 -suppress-warnings G0046:G0020:S0015:S0080:S0039"
endif
ifeq ($(BOARD),zcu102)
    CONNECTALFLAGS += --xci=$(IPDIR)/$(BOARD)/zynq_ultra_ps_e_0/zynq_ultra_ps_e_0.xci
endif

CONNECTALFLAGS += $(FPGAMAKE_CONNECTALFLAGS)
ifeq ($(USE_BUILDCACHE),1)
BUILDCACHE?=$(CONNECTALDIR)/../buildcache/buildcache
BUILDCACHE_CACHEDIR?=$(CONNECTALDIR)/../fpgamake-cache/$(shell basename `/bin/pwd`)/$(PROJECTDIR)
CONNECTALFLAGS += --cache=$(BUILDCACHE_CACHEDIR)
endif

CONNECTALFLAGS += $(EXTRA_CONNECTALFLAGS)

ifeq ($(USE_PRINTF),1)
PRINTF_EXTRA=$(PROJECTDIR)/generatedbsv/DisplayInd.bsv
else
PRINTF_EXTRA=$(CONNECTALDIR)/bsv/DisplayInd.bsv
endif

ifneq ($(USE_AUTOTOP),)
GPROJ = $(PROJECTDIR)/generatedbsv
GENTOP = $(GPROJ)/IfcNames.bsv
endif

comma := ,
gentarget:: process_autotop generate_altera_custom
	@[ -e $(CONNECTALDIR)/scripts/syntax/parsetab.py ] || make -C $(CONNECTALDIR) scripts/syntax/parsetab.py
ifeq ($(USE_PRINTF),1)
	$(CONNECTALDIR)/scripts/preprocess_trace.py $(PROJECTDIR) $(BSVFILES)
endif
	$(Q)$(CONNECTALDIR)/scripts/makefilegen.py -B$(BOARD) --project-dir $(PROJECTDIR) \
	$(foreach interfaces, $(INTERFACES), -interfaces $(interfaces)) \
	$(foreach f, $(CPPFILES), --source $f) \
	$(foreach f, $(ALL_CPPFILES2), --source2 $f) \
	$(foreach f, $(BSVPATH), --bsvpath $f) \
	$(foreach f, $(PINOUT_FILE), --pinout $f) \
	$(foreach f, $(PIN_BINDINGS), --pin-binding $f) \
	$(foreach f, $(PRTOP_FILE), --prtop $f) \
	$(foreach f, $(VARIANT_LIST), --prvariant $f) \
	$(foreach f, $(RECONFIG_MODULE), --reconfig $f) \
	$(foreach f, $(S2H_INTERFACES), -interfaces $(word 1, $(subst /,, $(subst :, , $f)))) \
	$(foreach f, $(H2S_INTERFACES), $(foreach g, $(subst $(comma), , $(word 2, $(subst :, , $f))), -interfaces $g)) \
	$(foreach f, $(PORTAL_DUMP_MAP), --dump_map $f) \
        $(CONNECTALFLAGS) $(BSVFILES) $(GENTOP) $(PRINTF_EXTRA) $(VERBOSE_SWITCH)

process_autotop::
	$(Q)[ -e $(PROJECTDIR) ] || mkdir -p $(PROJECTDIR)
	touch $(PROJECTDIR)/Makefile.autotop
ifneq ($(USE_AUTOTOP),)
	$(Q)[ -e $(GPROJ) ] || mkdir -p $(GPROJ)
	$(Q)$(CONNECTALDIR)/scripts/topgen.py --project-dir $(GPROJ) $(AUTOTOP) $(CNOC) \
	    $(foreach f, $(S2H_INTERFACES), --wrapper $f) \
	    $(foreach f, $(H2S_INTERFACES), --proxy $f)   \
	    $(foreach f, $(MEM_READ_INTERFACES), --memread $f)   \
	    $(foreach f, $(MEM_WRITE_INTERFACES), --memwrite $f)
endif

generate_altera_custom::
ifneq ($(PIN_BINDINGS), )
ifneq ($(filter $(BOARD), de5 htg4), )
	$(Q)[ -e $(PROJECTDIR)/generatedbsv ] || mkdir -p $(PROJECTDIR)/generatedbsv
	$(CONNECTALDIR)/scripts/generate-constraints.py -f altera \
		$(foreach f, $(PIN_BINDINGS), -b $f) \
		-o $(PROJECTDIR)/generatedbsv/$(BOARD).qsf \
		--boardfile $(CONNECTALDIR)/boardinfo/$(BOARD).json --pinoutfile $(PINOUT_FILE)
endif
else
	$(Q) if [ -e $(CONNECTALDIR)/constraints/altera/$(BOARD).qsf ]; then cp $(CONNECTALDIR)/constraints/altera/$(BOARD).qsf $(PROJECTDIR)/generatedbsv/$(BOARD).qsf; fi
endif

prebuild::
	@# additional steps needed before making verilog etc
ifneq ($(NEED_XILINX_PCIE_$(BOARD)),)
	@echo "building ... $(BOARD) PCIe gen$(PCIEGEN)"
	$(Q)[ -e $(IPDIR) ] || mkdir -p $(IPDIR)
	cd $(PROJECTDIR); BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) vivado -notrace -mode batch -source $(shell cd $(CONNECTALDIR); /bin/pwd)/scripts/connectal-synth-pcie.tcl
endif
ifeq ($(BOARD),zcu102)
	@echo "building ... $(BOARD) Zynq MPSOC core"
	$(Q)[ -e $(IPDIR) ] || mkdir -p $(IPDIR)
	cd $(PROJECTDIR); BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) vivado -notrace -mode batch -source $(shell cd $(CONNECTALDIR); /bin/pwd)/scripts/connectal-synth-zynq-mpsoc.tcl
endif

ifneq (, $(QUARTUS_SH))
# Synthesis Altera PCIe Core and PLL
ifeq ($(NEED_ALTERA_PCIE_$(BOARD)),1)
	cd $(PROJECTDIR); BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) $(QUARTUS_SH) -t $(shell cd $(CONNECTALDIR); /bin/pwd)/scripts/connectal-synth-pcie.tcl
endif

# Synthesize Altera Ethernet Core
ifeq ($(NEED_ALTERA_ETH_$(BOARD)), 1)
	cd $(PROJECTDIR); BUILDCACHE_CACHEDIR=$(BUILDCACHE_CACHEDIR) $(BUILDCACHE) $(QUARTUS_SH) -t $(shell cd $(CONNECTALDIR); /bin/pwd)/scripts/connectal-synth-eth.tcl
endif
endif

